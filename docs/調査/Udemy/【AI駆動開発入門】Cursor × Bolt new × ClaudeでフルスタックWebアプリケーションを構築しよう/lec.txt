1|本講座で学べる事と完成品のデモ
2|AI駆動開発で使用するAIツールの紹介
3|Cursorの初期設定をしよう
4|Cursorで使うショートカットキーの紹介
5|Node.js環境を構築しよう
6|Webアプリ開発全体工程フローを理解しよう：その①
7|Webアプリ開発全体工程フローを理解しよう：その②
8|Claudeを使って要件定義・機能要件からスタートしよう
9|詳細設計を考慮した機能要件の洗い出し
10|要件定義書をNotionにまとめてみよう
11|データベース設計からRDB図を出力してみよう
12|開発するための技術スタックを選定してみよう
13|アプリ全体の構成図をClaudeに聞いてみよう
14|Claudeでディレクトリ設計をしてみよう
15|CursorでAI駆動開発をはじめよう
16|.cursorrulesを作成してCursorにルール設定をしてみよう
17|CursorのComposer機能を使ってファイルを自動生成させよう
18|【追加】次の動画でBolt.newを利用する方へ
19|SNSのUIはBolt.newに任せてみよう
20|Boltで作ったUIをCursorに取り込もう
21|残りのUIの修正とフォントを日本語に修正しよう
22|ホバー時の色の修正とプロフィールの追加
23|プロフィールページをCursorで作ってみよう
24|.cursorrulesの見直しとリファクタリング
25|AIで修正するのが面倒な時の対処法
26|レスポンシブ対応してみよう
27|スマホサイズ表示の細かいUI修正をしよう
28|スマホサイズ表示の細かいUI修正をしよう：その②
29|Webアプリケーション開発でデータを取り扱う場合
30|Supabaseでデータベースを準備しよう
31|SupabaseとPrismaの初期セットアップを始めよう
32|テーブル設計とモデルのマイグレーション操作
33|SQLエディタを使ってシードデータを用意してみよう
34|SNSタイムラインにシードデータを表示してみよう
35|プロフィールページでもシードデータを表示してみよう
36|データフェッチをDALに分けて実装しよう
37|ポストへの返信も表示できるようにしよう
38|ポストへの返信の細かい修正をしよう
39|CursorのAgentモードでコード全体をリファクタリングしてみよう
40|GitHubの用意と開発用ブランチに切って開発しよう
41|Clerkでユーザー認証を始めよう
42|ユーザー操作時に認証用ポップアップを表示させよう
43|ユーザーアイコンを追加してログアウトできるようにしよう
44|ユーザー認証後にWebhookを発火させよう
45|ngrokを使って一時的にサーバーをパブリックに公開してみよう
46|ミドルウェアでClerk用のAPIをパブリックに修正しよう
47|usersテーブルの修正とユーザー認証後にデータ保存しよう
48|clerkIdカラムの追加とWebhookテストをしよう
49|Project Rulesを追加しよう
50|ポスト投稿にはServerActionsを利用しよう
51|useActionStateを使ったリファクタリングをしよう
52|いいね機能を実装しよう
53|いいねアイコンを切り替えよう
54|useOptimisticを使った楽観的に更新を実装しよう
55|プロフィールページのUIを修正しよう
56|Parallel RoutesとIntercepting Routesでモダール表示してみよう
57|Server Actionsで編集機能を実装しよう
58|フォロー/アンフォロー機能を実装しよう
59|ポストへの返信機能を実装しよう
60|カバー画像アップロード機能を実装しよう
61|Supabase Storage Bucketのポリシー設定を変更しよう
62|ローカルでビルドしてみよう
63|【注意】デプロイ前はセキュリティチェックをしよう
64|Vercelへデプロイしてみよう
65|ボーナスレクチャー
